TNPG: Benjamin (Jun Hong Wang, Brian Wang, Nicole Zhou)
APCS
L06: Read/Review/Expand
2022-02-10

---------------------------------------ACTIVITY 1---------------------------------------
1a) public static double sentimentVal( String word )
b) Yes, it requires a single String parameter. When a different type of parameter is passed, you get a runtime error.
c) Yes, it returns a double.

3a) Yes, parameter is a String.
b) No, parameter is not a String.
c) No, sentimentVal only takes one String as parameter.

---------------------------------------ACTIVITY 2---------------------------------------
4) We first used the textToString to convert the contents of the file to String. Using a while loop, indexOf, and substring, we separated each individual word from the String, getting rid of the punctuation (using removePunctuation) and converting to lowercase, and added them to an ArrayList. Then using a foreach loop, we found the sentiment for each word in the ArrayList and added that to the total sentiment value.

5a) The ratings for the two reviews (SimpleReview.txt and GoodReview.txt) since in SimpleReview.txt, the review was very negative, so a 2 star rating seems reasonable. For GoodReview.txt, the review was positive, so a 4 star rating seems about right.
b) We can add more to the positive and negative adjectives list. We can also modify the sentiment values in the list for more accurate values.

6a) The conditionals are put in the wrong order. For the if statement, the "< 15" also includes "< 10", "< 5", and so on... meaning
b) To fix it, the student should put the smaller numbers first.

---------------------------------------ACTIVITY 3---------------------------------------
3) indexOf returns the index of the first occurrence of a character. Substring is used to obtain parts of a String. Using indexOf and substring allows us to locate a space and divide the String. In substring(a, b), we have to add 1 to b because it will only return the String from index a to index b-1.

5) Static methods are members of the class, and non-static methods are members of an instance, meaning it's a thing that has all the attributes and methods of that class, but editing one instance will not change another instance.

6) To have an autogenerated review, we can use randomAdjective. To have a fake positive/negative review, we can use randomNegativeAdj and randomPositiveAdj.

---------------------------------------ACTIVITY 4---------------------------------------
1) Someone might want to make a plave look worse than it actually is, and to make the ratings go down, will autogenerate a negative review.

2) On the other hand, the owner of the business might want to make the business look better than it actually is, and might generate a positive review.

3) The best way to maintain variety in a review while also strengthening the position of the review would be to replace all out of line adjectives with those that support the point of view. For example, a good review will have all negative adjectives, if any, changed to good. A bad review will have all positive adjectives, if any, changed to bad.

5) The first character of oneWord is gotten rid of.

6) The code will only be able to find the corresponding adjective in the list if the words are exactly the same, it won't be able to recognize the word with "*".

7) Instead of replacing bad adjectives in a good review, we could replace ALL adjectives in a review with stronger adjectives. For example, we could replace all adjectives with a sentimentVal of under 3 to adjectives with a sentimentVal over 3.

---------------------------------------ACTIVITY 5---------------------------------------
1) We thought this program would be simple to implement, while still meeting all the requirements. It uses iteration, String methods, and conditional statements, while managing to be simple.

2) We started off with a main method, and incrementally developed the screamify method. At first, we had a helper method, findPunc(String input) to find the index of punctuation, but we removed it, and put it inside the screamify method. Then, we realized that we didn't need an output method, since we could just edit the input string itself, and return it. We then implemented the conditionals and loops, so that end punctuation would be found, then changed to exclamation marks.

3) public static String screamify(String input)
    This method isn't a member of an instance, and there are no instance variables that we are working with, so we made it static. The one parameter it needs is a string to screamify. We also return a string, since the method modifies the string.

4) Code:
    while(input.indexOf(".") != -1){
      int nextPunc = input.indexOf(".");
      if(nextPunc != input.length() - 1){
        input = input.substring(0, nextPunc) + "!" + input.substring(nextPunc + 1);
      }
      else{
        input = input.substring(0, nextPunc) + "!";
      }
    }
    indexOf(".") locates the next index or location of a period, and if it isn't -1, that means there is still another period in the input string. While that is true, we can use substring to replace the parts of the input that we don't need, which is end punctuation. substring returns a string, with all the characters from one position to another, or the characters from one position onwards.

5) Code:
    for (int i = 0; i < input.length(); i++) {
      String nextChar = new String();
      nextChar = input.substring(i, i + 1);
      if (nextChar.equals(".") ||
      nextChar.equals("?")) {
        input = input.substring(0, i) + "!" + input.substring(i + 1);
      }
    }

6) Code shown in number 4. It does word repeatedly, only if there is more of a specific type of punctuation. Equivalent code segement shown in question 5.
